# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Topik {
  id: ID!
  no: Int
  year: Int
  level: TopikLevelType
  parentId: Topik
  childrenId(where: TopikWhereInput! = {}, orderBy: [TopikOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopikWhereUniqueInput): [Topik!]
  childrenIdCount(where: TopikWhereInput! = {}): Int
  questionNumber: Int
  questionType: TopikQuestionTypeType
  score: Int
  audioURL: String
  questionStem: String
  questionContent: String
  options: JSON
  explanation: String
  createdAt: DateTime
}

enum TopikLevelType {
  TOPIK_I
  TOPIK_II
}

enum TopikQuestionTypeType {
  LISTENING
  READING
  WRITING
}

input TopikWhereUniqueInput {
  id: ID
}

input TopikWhereInput {
  AND: [TopikWhereInput!]
  OR: [TopikWhereInput!]
  NOT: [TopikWhereInput!]
  id: IDFilter
  no: IntFilter
  year: IntFilter
  level: TopikLevelTypeNullableFilter
  parentId: TopikWhereInput
  childrenId: TopikManyRelationFilter
  questionNumber: IntFilter
  questionType: TopikQuestionTypeTypeNullableFilter
  score: IntFilter
  audioURL: StringFilter
  questionStem: StringFilter
  questionContent: StringFilter
  explanation: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input TopikLevelTypeNullableFilter {
  equals: TopikLevelType
  in: [TopikLevelType!]
  notIn: [TopikLevelType!]
  not: TopikLevelTypeNullableFilter
}

input TopikManyRelationFilter {
  every: TopikWhereInput
  some: TopikWhereInput
  none: TopikWhereInput
}

input TopikQuestionTypeTypeNullableFilter {
  equals: TopikQuestionTypeType
  in: [TopikQuestionTypeType!]
  notIn: [TopikQuestionTypeType!]
  not: TopikQuestionTypeTypeNullableFilter
}

input TopikOrderByInput {
  id: OrderDirection
  no: OrderDirection
  year: OrderDirection
  level: OrderDirection
  questionNumber: OrderDirection
  questionType: OrderDirection
  score: OrderDirection
  audioURL: OrderDirection
  questionStem: OrderDirection
  questionContent: OrderDirection
  explanation: OrderDirection
  createdAt: OrderDirection
}

input TopikUpdateInput {
  no: Int
  year: Int
  level: TopikLevelType
  parentId: TopikRelateToOneForUpdateInput
  childrenId: TopikRelateToManyForUpdateInput
  questionNumber: Int
  questionType: TopikQuestionTypeType
  score: Int
  audioURL: String
  questionStem: String
  questionContent: String
  options: JSON
  explanation: String
  createdAt: DateTime
}

input TopikRelateToOneForUpdateInput {
  create: TopikCreateInput
  connect: TopikWhereUniqueInput
  disconnect: Boolean
}

input TopikRelateToManyForUpdateInput {
  disconnect: [TopikWhereUniqueInput!]
  set: [TopikWhereUniqueInput!]
  create: [TopikCreateInput!]
  connect: [TopikWhereUniqueInput!]
}

input TopikUpdateArgs {
  where: TopikWhereUniqueInput!
  data: TopikUpdateInput!
}

input TopikCreateInput {
  no: Int
  year: Int
  level: TopikLevelType
  parentId: TopikRelateToOneForCreateInput
  childrenId: TopikRelateToManyForCreateInput
  questionNumber: Int
  questionType: TopikQuestionTypeType
  score: Int
  audioURL: String
  questionStem: String
  questionContent: String
  options: JSON
  explanation: String
  createdAt: DateTime
}

input TopikRelateToOneForCreateInput {
  create: TopikCreateInput
  connect: TopikWhereUniqueInput
}

input TopikRelateToManyForCreateInput {
  create: [TopikCreateInput!]
  connect: [TopikWhereUniqueInput!]
}

type Dict {
  id: ID!
  name: String
  public: Boolean
  intlKey: String
  createdAt: DateTime
  createdBy: User
  list(where: DictItemWhereInput! = {}, orderBy: [DictItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DictItemWhereUniqueInput): [DictItem!]
  listCount(where: DictItemWhereInput! = {}): Int
}

input DictWhereUniqueInput {
  id: ID
}

input DictWhereInput {
  AND: [DictWhereInput!]
  OR: [DictWhereInput!]
  NOT: [DictWhereInput!]
  id: IDFilter
  name: StringFilter
  public: BooleanFilter
  intlKey: StringFilter
  createdAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  list: DictItemManyRelationFilter
}

input DictItemManyRelationFilter {
  every: DictItemWhereInput
  some: DictItemWhereInput
  none: DictItemWhereInput
}

input DictOrderByInput {
  id: OrderDirection
  name: OrderDirection
  public: OrderDirection
  intlKey: OrderDirection
  createdAt: OrderDirection
}

input DictUpdateInput {
  name: String
  public: Boolean
  intlKey: String
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  list: DictItemRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input DictItemRelateToManyForUpdateInput {
  disconnect: [DictItemWhereUniqueInput!]
  set: [DictItemWhereUniqueInput!]
  create: [DictItemCreateInput!]
  connect: [DictItemWhereUniqueInput!]
}

input DictUpdateArgs {
  where: DictWhereUniqueInput!
  data: DictUpdateInput!
}

input DictCreateInput {
  name: String
  public: Boolean
  intlKey: String
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  list: DictItemRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input DictItemRelateToManyForCreateInput {
  create: [DictItemCreateInput!]
  connect: [DictItemWhereUniqueInput!]
}

type DictItem {
  id: ID!
  name: String
  trans: JSON
  example: String
  exTrans: JSON
  createdAt: DateTime
  createdBy: User
  dict(where: DictWhereInput! = {}, orderBy: [DictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DictWhereUniqueInput): [Dict!]
  dictCount(where: DictWhereInput! = {}): Int
}

input DictItemWhereUniqueInput {
  id: ID
}

input DictItemWhereInput {
  AND: [DictItemWhereInput!]
  OR: [DictItemWhereInput!]
  NOT: [DictItemWhereInput!]
  id: IDFilter
  name: StringFilter
  example: StringFilter
  createdAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  dict: DictManyRelationFilter
}

input DictManyRelationFilter {
  every: DictWhereInput
  some: DictWhereInput
  none: DictWhereInput
}

input DictItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  example: OrderDirection
  createdAt: OrderDirection
}

input DictItemUpdateInput {
  name: String
  trans: JSON
  example: String
  exTrans: JSON
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  dict: DictRelateToManyForUpdateInput
}

input DictRelateToManyForUpdateInput {
  disconnect: [DictWhereUniqueInput!]
  set: [DictWhereUniqueInput!]
  create: [DictCreateInput!]
  connect: [DictWhereUniqueInput!]
}

input DictItemUpdateArgs {
  where: DictItemWhereUniqueInput!
  data: DictItemUpdateInput!
}

input DictItemCreateInput {
  name: String
  trans: JSON
  example: String
  exTrans: JSON
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  dict: DictRelateToManyForCreateInput
}

input DictRelateToManyForCreateInput {
  create: [DictCreateInput!]
  connect: [DictWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTopik(data: TopikCreateInput!): Topik
  createTopiks(data: [TopikCreateInput!]!): [Topik]
  updateTopik(where: TopikWhereUniqueInput!, data: TopikUpdateInput!): Topik
  updateTopiks(data: [TopikUpdateArgs!]!): [Topik]
  deleteTopik(where: TopikWhereUniqueInput!): Topik
  deleteTopiks(where: [TopikWhereUniqueInput!]!): [Topik]
  createDict(data: DictCreateInput!): Dict
  createDicts(data: [DictCreateInput!]!): [Dict]
  updateDict(where: DictWhereUniqueInput!, data: DictUpdateInput!): Dict
  updateDicts(data: [DictUpdateArgs!]!): [Dict]
  deleteDict(where: DictWhereUniqueInput!): Dict
  deleteDicts(where: [DictWhereUniqueInput!]!): [Dict]
  createDictItem(data: DictItemCreateInput!): DictItem
  createDictItems(data: [DictItemCreateInput!]!): [DictItem]
  updateDictItem(where: DictItemWhereUniqueInput!, data: DictItemUpdateInput!): DictItem
  updateDictItems(data: [DictItemUpdateArgs!]!): [DictItem]
  deleteDictItem(where: DictItemWhereUniqueInput!): DictItem
  deleteDictItems(where: [DictItemWhereUniqueInput!]!): [DictItem]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  topik(where: TopikWhereUniqueInput!): Topik
  topiks(where: TopikWhereInput! = {}, orderBy: [TopikOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopikWhereUniqueInput): [Topik!]
  topiksCount(where: TopikWhereInput! = {}): Int
  dict(where: DictWhereUniqueInput!): Dict
  dicts(where: DictWhereInput! = {}, orderBy: [DictOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DictWhereUniqueInput): [Dict!]
  dictsCount(where: DictWhereInput! = {}): Int
  dictItem(where: DictItemWhereUniqueInput!): DictItem
  dictItems(where: DictItemWhereInput! = {}, orderBy: [DictItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DictItemWhereUniqueInput): [DictItem!]
  dictItemsCount(where: DictItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
